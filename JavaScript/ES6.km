{
    "root": {
        "data": {
            "id": "bw6s7o61kvs0",
            "created": 1565524764321,
            "text": "ES6"
        },
        "children": [
            {
                "data": {
                    "id": "bw6scc7mtfs0",
                    "created": 1565525130117,
                    "text": "变量声明",
                    "priority": 1,
                    "expandState": "collapse"
                },
                "children": [
                    {
                        "data": {
                            "id": "bw6scl4g0pk0",
                            "created": 1565525149515,
                            "text": "var",
                            "note": "## var\n\n  - 可以重复定义\n  - 无法限制修改\n  - 没有块级作用域\n  - 有声明提前"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "bw6scnnz57c0",
                            "created": 1565525155051,
                            "text": "let",
                            "note": "## let\n\n  - 不能重复定义\n  - 有块级作用域\n  - 不会声明提前"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "bw6scpwp4s00",
                            "created": 1565525159931,
                            "text": "const",
                            "note": "## cosnt\n\n  - 定义常量\n  - 不能修改\n  - 有块级作用域"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "bw6ssu5sq6o0",
                    "created": 1565526423015,
                    "text": "解构赋值",
                    "note": "## 解构赋值\n\n### 数组解构\n  - 数组可以跳空元素\n  \n```js\nlet [a,b,c] = [1,2,3,4]\nlet [a,b,...c] = [1,2,3]\nlet [a,,b,c] = [1,2,3]\nlet arr = [1,2,3]\nlet longArr = [4,5,6]\nlongArr.push(...arr)\n```\n### 对象解构\n  - 对象不能跳空属性\n  - 对象属性支持别名\n  \n```js\nlet {username} = {username:\"js\",age:18}\n\nlet {...user} = {username:\"js\",age:18}\n\nlet {username,...user} = {username:\"js\",age:18}\n\nlet {username:uname} = {username:\"js\",age:18}\n```",
                    "priority": 2
                },
                "children": []
            },
            {
                "data": {
                    "id": "bw6tv4tc2t40",
                    "created": 1565529424044,
                    "text": "遍历",
                    "priority": 5,
                    "note": "## 遍历\n\n### 遍历数组\n\n### 遍历对象"
                },
                "children": []
            },
            {
                "data": {
                    "id": "bw6tvqfsqsg0",
                    "created": 1565529471114,
                    "text": "函数API",
                    "expandState": "collapse",
                    "priority": 4
                },
                "children": [
                    {
                        "data": {
                            "id": "bw6tuwdkmrs0",
                            "created": 1565529405676,
                            "text": "数组函数"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "bw6umh74udk0",
                                    "created": 1565531566833,
                                    "text": "map",
                                    "note": "## map\n>通过一个数组去生成一个长度相同的新数组\n\n  - 返回和原数组长度相同的数组\n  - 新数组的元素取决于遍历过程中返回的值\n  - 修改item不会改变原数组\n  - 不能使用break强行终止遍历"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "bw6umnif8400",
                                    "created": 1565531580575,
                                    "text": "filter"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "bw6umq0dma80",
                                    "created": 1565531586015,
                                    "text": "reduce"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "bw6umt26zs80",
                                    "created": 1565531592655,
                                    "text": "forEach"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "bw6tv1aufg00",
                            "created": 1565529416395,
                            "text": "字符串函数"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "bw6tvfm605c0",
                            "created": 1565529447555,
                            "text": "对象函数"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "bw6tw7a4wtc0",
                            "created": 1565529507777,
                            "text": "箭头函数",
                            "note": "## 箭头函数\n\n  - this指向\n  \n  - 返回值简写\n    - 函数体有且仅有一条return语句，花括号和return都可以省略\n    \n  - 参数简写\n    - 有且仅有一个参数，圆括号可以省略"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "bw6twdd37lk0",
                            "created": 1565529521017,
                            "text": "参数默认值"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "bw6u3wo7rvc0",
                            "created": 1565530111597,
                            "text": "参数展开",
                            "note": "## 参数展开\n>剩余参数\n\n  - 将所有参数放在一个数组中\n  - 将剩下的所有参数放在一个数组中"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "bw6uferyevs0",
                    "created": 1565531013011,
                    "text": "面向对象",
                    "priority": 6
                },
                "children": []
            },
            {
                "data": {
                    "id": "bwcrzixsm4o0",
                    "created": 1566133485765,
                    "text": "异步操作",
                    "expandState": "expand",
                    "priority": 3
                },
                "children": [
                    {
                        "data": {
                            "id": "bw6tugjc9y00",
                            "created": 1565529371197,
                            "text": "Promise",
                            "priority": null,
                            "note": "# Promise\n  - 执行异步操作\n  - 解决回调地狱",
                            "expandState": "collapse"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "bwcqo9jghyo0",
                                    "created": 1566129782192,
                                    "text": "静态方法"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "bwcri5zs47k0",
                                            "created": 1566132125396,
                                            "text": "all",
                                            "note": "# all\n\n将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "bwcrlm87tgo0",
                                            "created": 1566132395827,
                                            "text": "race",
                                            "note": "## race\n\nPromise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "bwcr4f0lzug0",
                                    "created": 1566131047939,
                                    "text": "实例方法"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "bwcr6j8rctk0",
                                            "created": 1566131213868,
                                            "text": "then",
                                            "note": "# then\n\n  - Promise成功的回调函数"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "bwcr6lsufwo0",
                                            "created": 1566131219436,
                                            "text": "catch",
                                            "note": "# catch\n\n  - 捕获异常\n  \n  - Promise链上任何一个Promise通过reject回调了错误，都会直接进入catch，后续的Promise将不再执行"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "bwcrob97qf40",
                            "created": 1566132607036,
                            "text": "async/await",
                            "note": "# async/await\n\n  - async可以单独修饰函数\n  \n  - await必须修饰Promise实例\n  \n  - await不能单独存在，必须放在async函数中\n  \n  - await promise 得到的结果必须是通过resolve回调的，不能通过reject回调chulai\n  \n  - async修饰的函数内部如果没有异步操作，则顺序执行，如果有异步操作，则async修饰的整个函数是异步执行的\n  \n",
                            "expandState": "collapse"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "bwcrobarbgo0",
                                    "created": 1566132607129,
                                    "text": "async"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "bwcrosusnhs0",
                                    "created": 1566132645346,
                                    "text": "await"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "default",
    "theme": "fresh-blue",
    "version": "1.4.43"
}